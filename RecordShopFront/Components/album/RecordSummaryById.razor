@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text
@using RecordShopFront.Services
@using RecordShopFront.models;
@if (!isLoaded)
{
    <p>Loading...</p>
}
else
{
    <div>
        <EditForm Model="@Album" FormName="UpdateAlbum" OnValidSubmit="ValidSubmit">
            <label for="Title">Title</label>
            <InputText @bind-Value="Album.Title" />
            <label for="Description">Description</label>
            <InputText @bind-Value="Album.Description" />
            <div>
                <label>New Artist:</label>
                <input @bind="newArtistName" />
                <button type="button" @onclick="AddArtist">Add Artist</button>
            </div>

            <ul>
                @foreach (var albumArtist in Album.Artists)
                {
                    <li>
                        @albumArtist.Artist.Name
                        <button type="button" @onclick="@(() => RemoveArtist(albumArtist.ArtistId))">Remove</button>
                    </li>
                }
            </ul>
            <button type="submit">Save</button>
        </EditForm>
    </div>
}





@code {

    [Parameter]
    public AlbumModel Album { get; set; }
    private string newArtistName;
    private bool isLoaded = false;


    private async void ValidSubmit()
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        var content = new StringContent(JsonSerializer.Serialize(Album), Encoding.UTF8, "application/json");
        var response = await client.PutAsync($"album/{Album.Id}", content);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Fail");
        }
    }




    protected override async Task OnInitializedAsync()
    {
        isLoaded = true;

    }

    private async void AddArtist()
    {
        if (!string.IsNullOrEmpty(newArtistName))
        {
            //check if artist exists
            var client = ClientFactory.CreateClient("MyHttpClient");
            var response = await client.GetAsync($"artist/name/{newArtistName}");
            //TODO: Add controller endpoint
            
            if (response.IsSuccessStatusCode)
            {
                var artist = response.Content.ReadFromJsonAsync<ArtistModel>().Result;
                Album.Artists.Add(new JunctionModel { Album = Album, Artist = artist, AlbumId = Album.Id, ArtistId = artist.Id });
                newArtistName = string.Empty;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Artist not found");
            }
        }
    }

    private void RemoveArtist(int artistId)
    {
        var albumArtist = Album.Artists.FirstOrDefault(aa => aa.ArtistId == artistId);
        if (albumArtist != null)
        {
            Album.Artists.Remove(albumArtist);
            StateHasChanged();
        }
    }

    

}

