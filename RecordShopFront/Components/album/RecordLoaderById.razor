@inject IHttpClientFactory ClientFactory
@using RecordShopFront.Components.album
@using System.Text.Json
@using System.Text

@if (Album == null)
{
    <Loader Message="Loading Records" />
}
else
{
    <div>
        <EditForm Model="@Album" FormName="UpdateAlbum" OnValidSubmit="ValidSubmit">
            <label for="Title">Title</label>
            <InputText @bind-Value="Album.Title" />
            <label for="Description">Description</label>
            <InputText @bind-Value="Album.Description" />
            <label>Assign genre to album</label>
            @foreach (var genre in AllGenres)
            {
                <div>
                    <input type="checkbox" checked="@IsGenreChecked(genre)" value="@genre" @onchange="(e) => UpdateSelectedGenres(e, genre)" /> @genre.ToString()
                </div>
            }
            <div>
                <label>Artists</label>
                <select @bind="@SelectedArtistIds" multiple>
                    @foreach (var artist in AllArtists)
                    {
                        <option value="@artist.Id" selected="@SelectedArtistIds.Contains(artist.Id)">@artist.Name</option>
                    }
                </select>
            </div>
            <button type="submit">Save</button>
        </EditForm>
    </div>

    <CascadingValue Value="@Album">
        <RecordSummaryById AllArtists="AllArtists"></RecordSummaryById>
    </CascadingValue>
}

@code {
    [Parameter]
    public int id { get; set; }
    AlbumReadDto? Album = new AlbumReadDto();
    private List<ArtistReadDto> AllArtists = new List<ArtistReadDto>();
    private HashSet<Genre> SelectedGenres { get; set; } = new HashSet<Genre>();
    public List<ArtistReadDto> SelectedArtists { get; set; } = new List<ArtistReadDto>();
    private List<int> SelectedArtistIds { get; set; } = new List<int>();
    private List<Genre> AllGenres = new List<Genre>();

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        Album = await client.GetFromJsonAsync<AlbumReadDto>($"album/{id}");
        //AllArtists = await client.GetFromJsonAsync<List<ArtistReadDto>>("artist");
        //AllGenres = Enum.GetValues(typeof(Genre)).Cast<Genre>().ToList();
        //SelectedArtistIds = Album.ArtistJunction.Select(j => j.Artist.Id).ToList();
    }
}
